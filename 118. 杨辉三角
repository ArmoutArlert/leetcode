/*
class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>> yanghui(numRows,vector<int>());
        if(numRows==1){
            yanghui[0].push_back(1);
        }
        if(numRows==2){
            yanghui[0].push_back(1);
            yanghui[1].push_back(1);
            yanghui[1].push_back(1);
        }
        if(numRows>2){
            yanghui[0].push_back(1);
            yanghui[1].push_back(1);
            yanghui[1].push_back(1);
            for(int i=2;i<numRows;i++){
                yanghui[i].push_back(1);
                for(int j=0;j<i-1;j++){
                    yanghui[i].push_back(yanghui[i-1][j]+yanghui[i-1][j+1]);
                }
                yanghui[i].push_back(1);
            }
        }
        return yanghui;

    }
}; */

// 优化
class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>> yanghui(numRows,vector<int>());
        if(numRows==1){
            yanghui[0].push_back(1);
        }
        if(numRows>=2){
            yanghui[0].push_back(1);
            yanghui[1].push_back(1);
            yanghui[1].push_back(1);
            // 两行杨辉三角到这里就排除了
            for(int i=2;i<numRows;i++){
                yanghui[i].push_back(1);
                for(int j=0;j<i-1;j++){
                    yanghui[i].push_back(yanghui[i-1][j]+yanghui[i-1][j+1]);
                }
                yanghui[i].push_back(1);
            }
        }
        return yanghui;

    }
};

// 标准答案，写的挺好的，比我写的强
class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>> ret(numRows);
        for (int i = 0; i < numRows; ++i) {
            ret[i].resize(i + 1);
            ret[i][0] = ret[i][i] = 1;
            for (int j = 1; j < i; ++j) {
                ret[i][j] = ret[i - 1][j] + ret[i - 1][j - 1];
            }
        }
        return ret;
    }
};
