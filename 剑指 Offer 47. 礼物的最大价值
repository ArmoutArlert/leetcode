// 最基本的dp
/*
class Solution {
public:
    int maxValue(vector<vector<int>>& grid) {
        if(grid.size()==0 || grid[0].size()==0){return 0;}
        int m = grid.size();
        int n =  grid[0].size();
        vector<vector<int>> dp(m,vector<int>(n));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(i==0 && j!=0){
                    dp[i][j] = dp[i][j-1] + grid[i][j];
                }else if(j==0 && i!=0){
                    dp[i][j] = dp[i-1][j] + grid[i][j];
                }else if(i!=0 && j!=0){
                    dp[i][j] = max(dp[i-1][j],dp[i][j-1]) + grid[i][j];
                }else{
                    dp[i][j] = grid[i][j];
                }
            }
        }
        return dp[m-1][n-1];
    }
};  */

// 省空间版本的dp
// 当前位置依赖于左侧和上面，只用一维数组即可
/*
class Solution {
public:
    int maxValue(vector<vector<int>>& grid) {
        if(grid.size()==0 || grid[0].size()==0){return 0;}
        int m = grid.size();
        int n =  grid[0].size();
        vector<int> dp(n);
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(i==0 && j!=0){
                    dp[j] = dp[j-1] + grid[i][j];
                }else if(j==0 && i!=0){
                    dp[j] += grid[i][j];
                }else if(i!=0 && j!=0){
                    dp[j] = max(dp[j],dp[j-1]) + grid[i][j];
                }else{
                    dp[j] = grid[i][j];
                }
            }
        }
        return dp[n-1];
    }
};  */


// 如果原来的数组可以动的话直接用原数组也行
/*
class Solution {
public:
    int maxValue(vector<vector<int>>& grid) {
        if(grid.size()==0 || grid[0].size()==0){return 0;}
        int m = grid.size();
        int n =  grid[0].size();
        vector<int> dp(n);
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(i==0 && j!=0){
                    grid[i][j] +=grid[i][j-1];
                }else if(j==0 && i!=0){
                    grid[i][j] += grid[i-1][j];
                }else if(i!=0 && j!=0){
                    grid[i][j] += max(grid[i][j-1],grid[i-1][j]);
                }
            }
        }
        return grid[m-1][n-1];
    }
};  */
