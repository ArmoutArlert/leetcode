/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
 /*
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if(!headA || !headB){return nullptr;}
        int leghthA = 0;
        int leghthB = 0;
        ListNode * p = headA;
        ListNode * q = headB;

        while(p){
           leghthA++;
           p = p->next; 
        }
        while(q){
           leghthB++;
           q = q->next; 
        }
        p = headA;
        q = headB;
        if(leghthA>leghthB){
            int i=0;
            while(i<leghthA-leghthB){
                i++;
                p = p->next;
            }
        }else if(leghthA<leghthB){
            int i=0;
            while(i<leghthB-leghthA){
                i++;
                q = q->next;
            }
        }

        while(p && q){
            if(p==q){
                return p;
            }else{
                p = p->next;
                q = q->next;
            }
        }
        return nullptr;

    }
};   */




class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if(!headA || !headB){return nullptr;}
        int leghthA = 0;
        int leghthB = 0;
        ListNode * p = headA;
        ListNode * q = headB;

        while(p){
           leghthA++;
           p = p->next; 
        }
        while(q){
           leghthB++;
           q = q->next; 
        }
        p = headA;
        q = headB;
        if(leghthA>leghthB){
            int i=0;
            while(i<leghthA-leghthB){
                i++;
                p = p->next;
            }
        }else if(leghthA<leghthB){
            int i=0;
            while(i<leghthB-leghthA){
                i++;
                q = q->next;
            }
        }

        while(p && q){
            if(p==q){
                return p;
            }else{
                p = p->next;
                q = q->next;
            }
        }
        return nullptr;

    }
};
