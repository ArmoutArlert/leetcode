// 方法一：正常的归并排序
/*
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        vector<int> temp(m+n);
        int p1=0,p2=0;
        int i=0;
        while(p1<m && p2<n){
            temp[i++]=nums1[p1]< nums2[p2] ? nums1[p1++]:nums2[p2++];
        }
        while(p1<m){
            temp[i++]=nums1[p1++];
        }
        while(p2<n){
            temp[i++]=nums2[p2++];
        }
        for(int j =0;j<m+n;j++){
            nums1[j]=temp[j];
        }
    }
}; */

//方法二：从后向前的归并排序，节省空间
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int p1=m-1;
        int p2=n-1;
        int i=m+n-1;
        while(p1>=0 && p2>=0){
            nums1[i--]= nums1[p1]>nums2[p2] ? nums1[p1--]: nums2[p2--];
        }
        // 处理好边界条件以及判断条件  
        while(p1<0 && p2>=0){
            nums1[p2]=nums2[p2];   // 不能够写成nums1[p2--]=nums2[p2--], 这样p2会被减去两次
            p2--;
        }
    }
};
