/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

// 第一遍，还是老问题，递归的最终判断条件选错了
 /*
class Solution {
public:
    int maxDepth(TreeNode* root) {
        int depth=0;
        int left;
        int right;
        if(root->left==nullptr && root->right==nullptr){
            depth++;
            return depth;
        }
        left=maxDepth(root->left);
        right=maxDepth(root->right);
        depth=max(left,right)+1;
        return depth;
 
    }
};   */
/*
class Solution {
public:
    int maxDepth(TreeNode* root) {
        int maxdepth=0;
        int left;
        int right;
        if(root==nullptr){
            return maxdepth;
        }
        left=maxDepth(root->left);
        right=maxDepth(root->right);
        maxdepth=max(left,right)+1;
        return maxdepth;
    }
};   */

// 第二遍，用的递归，可以考虑用BFS
class Solution {
public:
    int maxDepth(TreeNode* root) {     
        int left;
        int right;
        if(root==nullptr){
            return 0;
        }
        left=maxDepth(root->left);
        right=maxDepth(root->right);
        return max(left,right)+1;
    }
};
