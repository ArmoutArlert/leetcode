/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

// 第一版
// 维护两个哈希表用来记录链表，这样方便快速找到随机指针的指向
/*
class Solution {
public:
    Node* copyRandomList(Node* head) {

        if(head == nullptr){return nullptr;}
        unordered_map<Node*,int> hash1;
        unordered_map<int,Node*> hash2;
        int i=0;
        Node* cur = head;
        Node* copyHead = new Node(-1);
        Node* temp = copyHead;
        // 第一遍构建新链表
        while(cur!=nullptr){
            temp->next = new Node(cur->val);
            i++;
            temp = temp->next;
            hash1.insert({cur,i});
            hash2.insert({i,temp});
            cur = cur->next;        
        }
        cur = head;
        temp = copyHead;
        // 为新链表的随机指针赋值
        while(cur!=nullptr){
            if(cur->random == nullptr){
                temp->next->random =nullptr;
            }else{
                temp->next->random =hash2[hash1[cur->random]];
            }
            cur = cur->next;
            temp = temp->next;
        }

        return copyHead->next;
    }
}; */

// 只需要一个hashmap, 键值分别为原来链表的辅助指针以及新链表的辅助指针
/*
class Solution {
public:
    Node* copyRandomList(Node* head) {

        if(head == nullptr){return nullptr;}
        unordered_map<Node*,Node*> hash;
        Node* cur = head;
        Node* copyHead = new Node(-1);
        Node* temp = copyHead;
        // 第一遍构建新链表
        while(cur!=nullptr){
            temp->next = new Node(cur->val);
            temp = temp->next;
            hash.insert({cur,temp});  // hash表插入
            cur = cur->next;        
        }
        cur = head;
        temp = copyHead;
        // 为新链表的随机指针赋值
        while(cur!=nullptr){
            if(cur->random == nullptr){
                temp->next->random =nullptr;
            }else{
                temp->next->random =hash[cur->random];
            }
            cur = cur->next;
            temp = temp->next;
        }
        return copyHead->next;
    }
}; */

class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(head == nullptr){return nullptr;}
        Node* cur = head;
        // 后面复制节点
        while(cur!=nullptr){
            Node* temp = cur->next;
            cur->next = new Node(cur->val);
            cur->next->next = temp;
            cur = temp;
        }
        // 操作random指针
        cur = head;
        while(cur!=nullptr){
            cur->next->random = cur->random ?  cur->random->next : nullptr;
            cur = cur->next->next;
        }
        cur =head;
        Node* newHead = cur->next;
        Node* temp = newHead;
        while(cur!=nullptr){
            cur->next = temp->next;
            cur =cur->next;
            temp->next = cur==nullptr ? cur : cur->next;
            temp = temp->next;
        }
        return newHead;
    }
};
