/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

 // 递归，终于自己写对了一遍
 // 我这里：既要判断左右子树是否满足某一要求（返回一个bool变量）
 // 又要记录左右子树的某些信息（比如深度），我采用的是函数返回bool变量，然后给递归函数传递引用，
 // 利用引用记录某些信息，虽然这个变量会不断被覆盖，但是没关系不影响
 /*
class Solution {
public:
    bool trace(TreeNode* root,int& depth) {
        int depth1;
        int depth2;
        if(root==nullptr){
            depth=0; 
            return true;
            }      
        if(trace(root->left,depth1) && trace(root->right,depth2)) {
           if(abs(depth1-depth2)>1) return false;
            else{
                depth=max(depth1,depth2)+1;
                return true; 
            }
        }
        return false;
    }

    bool isBalanced(TreeNode* root) {
        int depth;
       return trace(root,depth);
    }

};  */

// 但是还是看看官方的两种标准答案，感觉这两种都很妙
// 官方思路1，从下向上进行递归，这个也是面对着既要满足返回判断左右子树是不是满足某些条件
// 又要满足能够返回左右子树的某些信息，官方使用的方法是同时递归两个函数，
// 进而弥补一个函数只能够返回一个值的缺点
class Solution {
public:
    int height(TreeNode* root) {
        if (root == NULL) {
            return 0;
        } else {
            return max(height(root->left), height(root->right)) + 1;
        }
    }

    bool isBalanced(TreeNode* root) {
        if (root == NULL) {
            return true;
        } else {
            return abs(height(root->left) - height(root->right)) <= 1 && isBalanced(root->left) && isBalanced(root->right);
        }
    }
};

// 官方思路2，从下向上递归，这个去看一看程序
