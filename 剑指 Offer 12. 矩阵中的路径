// 不需要path
class Solution {
public:
    bool trace(vector<vector<char>>& board, string& word,vector<vector<int>>& visited,int index,int i,int j){
        if(board[i][j] != word[index]){return false;}
        else if(index == word.size()-1){return true;}
        visited[i][j]=true;
        // 保证不越界
        int m = board.size();
        int n = board[0].size();
        vector<pair<int,int>> change{{1,0},{0,1},{-1,0},{0,-1}}; // 这里原来是vector<vector<int>> change,导致占用内存很大，不如用pair
        bool result = false;
        for(auto& ele:change){
            int a = i+ele.first;
            int b = j+ele.second;
            if( a>=0 && a<m && b>=0 && b<n && visited[a][b]==false){
                if(trace(board,word,visited,index+1,a,b)==true){
                   result = true;
                   break;
                }
            }
        }
        visited[i][j]=false;  // 就是这个地方写的 visited[i][j] == false; 直接导致错误，应该是 = 
        return result;   
    }

    bool exist(vector<vector<char>>& board, string word) {
        int m = board.size();
        int n = board[0].size();
        vector<vector<int>> visited(m,vector<int>(n));
        for(int i =0;i<m;i++){
            for(int j=0;j<n;j++){
                bool isExist =trace(board,word,visited,0,i,j);
                if(isExist == true){
                    return true;
                }
            }
        }
        return false; 
    }
};







