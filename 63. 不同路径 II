//动态规划，没有空间压缩版
/*
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {      

        if(obstacleGrid.size()==0 && obstacleGrid[0].size()==0) return 0; 
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        vector<vector<int>> dp(m,vector<int>(n,0));
        dp[0][0]=1;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(obstacleGrid[i][j]==1){
                    dp[i][j]=0;
                }
                else if(i==0 && j!=0){
                    dp[i][j]=dp[i][j-1];
                }
                 else if(j==0 && i!=0){
                    dp[i][j]=dp[i-1][j];
                }
                else if(i!=0 && j!=0){
                    dp[i][j]=dp[i-1][j]+dp[i][j-1];
                }
            }
        }
        return dp[m-1][n-1];
    }
}; */

// 动态规划，空间压缩版本,仅有上和左
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {      

        if(obstacleGrid.size()==0 && obstacleGrid[0].size()==0) return 0; 
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        vector<int> dp(n,0);
        dp[0]=1;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(obstacleGrid[i][j]==1){
                    dp[j]=0;
                }
                /*
                else if(i==0 && j!=0){
                    dp[j]=dp[j-1];
                }      
                else if(i!=0 && j!=0){
                    dp[j]=dp[j]+dp[j-1];
                } */ 
                // 因为数组初始化为0了，所以可以进一步合并为下面的    
                else if(j!=0){
                    dp[j]=dp[j]+dp[j-1];
                }
            }
        }
        return dp[n-1];
    }
};
