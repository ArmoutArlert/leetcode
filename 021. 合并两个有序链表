/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
 // 自己写的太麻烦了 ---> 不用一个链表贴另外一个链表上
 /*
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        
        if(l1 == nullptr){return l2;}
        if(l2 == nullptr){return l1;}
        
        ListNode* pre = new ListNode(-1);
        ListNode* newHead = pre;
        ListNode* cur = l1;
        pre->next = l1;
        ListNode* p2 = l2;

        while(cur!=nullptr && p2!=nullptr){
            if(p2->val <= cur->val){
               ListNode* temp2 = p2->next;
               p2->next = cur; 
               pre->next = p2;
               pre = p2;
               p2 = temp2;
            }else{
                pre = cur;
                cur = cur->next;
                
            }
            if(cur == nullptr){
                pre->next = p2;
            }
        }
        return newHead->next;
    }
};  */


//递归求解

// 链表递归：从左到右的模型
/*
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        
        if(l1 == nullptr){return l2;}
        if(l2 == nullptr){return l1;}
        
        if(l1->val <= l2->val){
            l1->next = mergeTwoLists(l1->next,l2);
            return l1;
        }else{
            l2->next = mergeTwoLists(l1,l2->next);
            return l2;
        }
    }
};  */

// 非递归求解
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* newHead = new ListNode(-1);
        ListNode* cur = newHead;

        while(l1 && l2){
            if(l1->val >= l2->val){
                cur->next = l2;
                cur = l2;
                l2 = l2->next;
            }else{
                cur->next = l1;
                cur = l1;
                l1 = l1->next;
            }
        }
        cur->next = l1==nullptr ? l2:l1;
        return newHead->next;
    }
};
