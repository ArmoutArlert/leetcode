/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 

 // 基本递归做法，浪费空间
class Solution {
public:

    void trace(TreeNode* root,vector<string>& vec,string path){
        if(root == nullptr){
            return;
        }
        // 注意这里面要注意刚开始进来的时候path为空要区别一下
        if(path.empty())  path += to_string(root->val);
        else path = path + "->" + to_string(root->val);
       
        if(root->left== nullptr && root->right==nullptr){
            vec.push_back(path);
            return;
        }
        trace(root->left,vec,path);
        trace(root->right,vec,path);
    }

    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> sol;
       // string path;
       // trace(root,sol,path);
        trace(root,sol,"");
        return sol;
    }
};


// 使用剪枝节省内存
/*
class Solution {
public:

    void trace(TreeNode* root,vector<string>& vec,string& path){
        if(root == nullptr){
            return;
        }
        // 注意这里面要注意刚开始进来的时候path为空要区别一下
        if(path.empty())  path += to_string(root->val);
        else path = path + "->" + to_string(root->val);
       
        if(root->left== nullptr && root->right==nullptr){
            vec.push_back(path);
            return;
        }
        //剪枝
        string path0=path;
        trace(root->left,vec,path);
        path=path0;
        trace(root->right,vec,path);
        path=path0;

    }

    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> sol;
        string path;
        trace(root,sol,path);
        return sol;
    }
};  */

/*
class Solution {
public:
    void construct_paths(TreeNode* root, string path, vector<string>& paths) {
        if (root != nullptr) {
            path += to_string(root->val);
            if (root->left == nullptr && root->right == nullptr) {  // 当前节点是叶子节点
                paths.push_back(path);                              // 把路径加入到答案中
            } else {
                path += "->";  // 当前节点不是叶子节点，继续递归遍历
                construct_paths(root->left, path, paths);
                construct_paths(root->right, path, paths);
            }
        }
    }

    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> paths;
        construct_paths(root, "", paths);
        return paths;
    }
};  */

