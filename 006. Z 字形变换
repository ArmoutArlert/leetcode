/*
// 智力题找规律 + code能力
class Solution {
public:
    string convert(string s, int numRows) {
        if(numRows == 1) return s;
        vector<string> vec(numRows);
        int flag=0;
        int j=0;
        for(int i=0;i<s.size();i++){
            if(flag==0){
                vec[j].push_back(s[i]);
                j++;
                if(j>=numRows){
                    j = numRows>2? (numRows-2):0;
                    flag = numRows>2? 1:0;
                }
            }
            else{
                vec[j].push_back(s[i]);
                j--;
                if(j<1){
                    j=0;  // 可加可不加
                    flag=0;
                }
            }
        }
        string sol;
        for(auto str:vec){
            sol += str;
        }
        return sol;
    }
};
*/

// 标准答案，比我写的好很多

class Solution {
public:
    string convert(string s, int numRows) {

        if (numRows == 1) return s;

        vector<string> rows(min(numRows, int(s.size())));
        int curRow = 0;
        bool goingDown = false;

        for (char c : s) {
            rows[curRow] += c;
            if (curRow == 0 || curRow == numRows - 1) goingDown = !goingDown;
            curRow += goingDown ? 1 : -1;
        }

        string ret;
        for (string row : rows) ret += row;
        return ret;
    }
}; 


// 找规律
// while和for相比的好处是能够灵活控制i++出现在程序中的位置
// 对应参考答案中的方法2
