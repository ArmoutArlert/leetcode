
// 和官方思路一样，就是使用双指针减小一层循环，时间复杂度不可避免的是O(n^3)
// 还可以进行一些剪枝，让速度加快（面试可以用上）
// code题，边界条件要想对
/*
class Solution {
public:
    //右移
    void rightMove(vector<int>& nums,int& index,int limit){
        index++;
        while(index<limit && nums[index-1]==nums[index]){
            index++;
        }
    }
    //左移
    void leftMove(vector<int>& nums,int& index,int limit){
        index--;
        while(limit<index && nums[index+1]==nums[index]){
            index--;
        }
    }

    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        sort(nums.begin(),nums.end());
        vector<vector<int>> vec;
        int n = nums.size();
        for(int first = 0; first<n-3;){
            for(int second = first+1; second<n-2;){
                int third = second +1;
                int forth = nums.size()-1;
                
                while(third < forth){
                    if(nums[first]+nums[second]+nums[third]+nums[forth] < target){
                        rightMove(nums,third,forth);
                    }
                    else if(nums[first]+nums[second]+nums[third]+nums[forth] == target){
                        vec.push_back({nums[first],nums[second],nums[third],nums[forth]});
                        //相等如何移动
                        rightMove(nums,third,forth);
                        leftMove(nums,forth,third);
                    }
                    else{
                        leftMove(nums,forth,third);
                    }
                }
                rightMove(nums,second,n-2);
            }
            rightMove(nums,first,n-3);
        }
        return vec;
    }
}; */

// 官方答案
// 加入剪枝速度会快很多
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> quadruplets;
        if (nums.size() < 4) {
            return quadruplets;
        }
        sort(nums.begin(), nums.end());
        int length = nums.size();
        for (int i = 0; i < length - 3; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            if (nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] > target) {
                break;
            }
            if (nums[i] + nums[length - 3] + nums[length - 2] + nums[length - 1] < target) {
                continue;
            }
            for (int j = i + 1; j < length - 2; j++) {
                if (j > i + 1 && nums[j] == nums[j - 1]) {
                    continue;
                }
                if (nums[i] + nums[j] + nums[j + 1] + nums[j + 2] > target) {
                    break;
                }
                if (nums[i] + nums[j] + nums[length - 2] + nums[length - 1] < target) {
                    continue;
                }
                int left = j + 1, right = length - 1;
                while (left < right) {
                    int sum = nums[i] + nums[j] + nums[left] + nums[right];
                    if (sum == target) {
                        quadruplets.push_back({nums[i], nums[j], nums[left], nums[right]});
                        while (left < right && nums[left] == nums[left + 1]) {
                            left++;
                        }
                        left++;
                        while (left < right && nums[right] == nums[right - 1]) {
                            right--;
                        }
                        right--;
                    } else if (sum < target) {
                        left++;
                    } else {
                        right--;
                    }
                }
            }
        }
        return quadruplets;
    }
};
