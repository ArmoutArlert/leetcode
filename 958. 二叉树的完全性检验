/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

 // 满足两点条件，详见算法课程入门
 // 我的最后判断逻辑和左老师的不一样，但是没关系，整体上都行得通
class Solution {
public:
    bool isCompleteTree(TreeNode* root) {
        if(root==nullptr){return true;}    // 这句话必须需要加上的
        queue<TreeNode*> que;
        que.push(root);
        TreeNode* cur;
        TreeNode* next;
        while(!que.empty()){
            cur=que.front();
            que.pop();
            if(cur->left) que.push(cur->left);
            if(cur->right) que.push(cur->right);
            if(cur->left != nullptr  &&  cur->right != nullptr) continue; // 这个continue用的好呀，没有这个continue循环可就不对了，就只能够加上判断标志位
            if(cur->left == nullptr  &&  cur->right != nullptr){
                return false;
            }
            if(!que.empty()) {
                next=que.front();
                if(next->left || next->right) return false;
            }
        }
        return true;
    }
};
