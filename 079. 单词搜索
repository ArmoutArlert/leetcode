
// 刚开始超时了，所以修改超时的方法：1.减枝加上+引用传递  2.减少判断次数
class Solution {
public:

    bool trace(vector<vector<char>>& board, string& word,int x,int y,string path,vector<vector<int>>& visit) {
        path=path+board[x][y];
        
        int m=path.size();
        int n=word.size();
        
        if(m>n) return false;
        /*
        for(int i=0;i<m;i++){
            if(path[i]!=word[i]){
                return false;
            }  
        }*/
        if(path[m-1]!=word[m-1]) return false;
        if(m==n) return true;
        
        visit[x][y] = 1;

       // 像这种都是||的，没必要都判断一遍
        if(x-1>=0 && visit[x-1][y]==0 && trace(board,word,x-1,y,path,visit)) {return true;}
        if(x+1<board.size() && visit[x+1][y]==0 && trace(board,word,x+1,y,path,visit)) {return true;}
        if(y-1>=0 && visit[x][y-1]==0 && trace(board,word,x,y-1,path,visit)) {return true;}
        if(y+1<board[0].size() && visit[x][y+1]==0 && trace(board,word,x,y+1,path,visit)) {return true;}
        // 这里的剪枝是可以的，因为没执行一遍递归函数，它自己在这里就把自己给剪了，而不是剪下一次递归调用，所以是相互不影响的
        visit[x][y]=0;
        return false;
    }



    bool exist(vector<vector<char>>& board, string word) {
        
        if(board.size()==0 || board[0].size()==0) return false;
        vector<vector<int>> visit(board.size(),vector<int>(board[0].size()+1,0));
        for(int i=0;i<board.size();i++){
            for(int j=0;j<board[0].size();j++){
                if(trace(board,word,i,j,"",visit)==true){
                    return true;
                }
            }
        }
        return false;
    }
};
